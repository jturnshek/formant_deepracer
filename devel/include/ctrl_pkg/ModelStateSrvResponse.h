// Generated by gencpp from file ctrl_pkg/ModelStateSrvResponse.msg
// DO NOT EDIT!


#ifndef CTRL_PKG_MESSAGE_MODELSTATESRVRESPONSE_H
#define CTRL_PKG_MESSAGE_MODELSTATESRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ctrl_pkg
{
template <class ContainerAllocator>
struct ModelStateSrvResponse_
{
  typedef ModelStateSrvResponse_<ContainerAllocator> Type;

  ModelStateSrvResponse_()
    : hasError(0)  {
    }
  ModelStateSrvResponse_(const ContainerAllocator& _alloc)
    : hasError(0)  {
  (void)_alloc;
    }



   typedef int32_t _hasError_type;
  _hasError_type hasError;





  typedef boost::shared_ptr< ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ModelStateSrvResponse_

typedef ::ctrl_pkg::ModelStateSrvResponse_<std::allocator<void> > ModelStateSrvResponse;

typedef boost::shared_ptr< ::ctrl_pkg::ModelStateSrvResponse > ModelStateSrvResponsePtr;
typedef boost::shared_ptr< ::ctrl_pkg::ModelStateSrvResponse const> ModelStateSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ctrl_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ctrl_pkg': ['/home/deepracer/catkin_ws/src/ctrl_pkg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bdeb11eee59c7e082b80fbf9a67f6d08";
  }

  static const char* value(const ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbdeb11eee59c7e08ULL;
  static const uint64_t static_value2 = 0x2b80fbf9a67f6d08ULL;
};

template<class ContainerAllocator>
struct DataType< ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ctrl_pkg/ModelStateSrvResponse";
  }

  static const char* value(const ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 hasError\n\
";
  }

  static const char* value(const ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hasError);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModelStateSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ctrl_pkg::ModelStateSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "hasError: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hasError);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CTRL_PKG_MESSAGE_MODELSTATESRVRESPONSE_H
